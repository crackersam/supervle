datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  TEACHER
  STUDENT
  GUARDIAN
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  forename      String
  surname       String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  activated     DateTime?
  role          Role      @default(STUDENT)
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  VerificationToken  VerificationToken[]
  lessons            Enrollment[]         @relation("Enrollments_user")
  passwordResetToken passwordResetToken[]

  guardians StudentGuardian[] @relation("StudentToGuardian")
  students  StudentGuardian[] @relation("GuardianToStudent")

  Attendance Attendance[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String   @default(cuid())
  userId     String
  token      String
  expires    DateTime
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([identifier, token])
}

model passwordResetToken {
  identifier String   @default(cuid())
  userId     String   @unique
  token      String
  expires    DateTime
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([identifier, token])
}

model Lesson {
  id          Int                @id @default(autoincrement())
  title       String
  createdAt   DateTime           @default(now())
  start       DateTime
  end         DateTime
  rrule       String?
  users       Enrollment[]       @relation("Enrollments_lesson")
  occurrences LessonOccurrence[]
  Attendance  Attendance[]
}

model LessonOccurrence {
  id       Int        @id @default(autoincrement())
  lesson   Lesson     @relation(fields: [lessonId], references: [id])
  lessonId Int
  start    DateTime
  end      DateTime
  files    File[]     @relation("Files_for_occurrence")
  homework Homework[]

  @@unique([lessonId, start])
}

model File {
  id           Int              @id @default(autoincrement())
  occurrence   LessonOccurrence @relation("Files_for_occurrence", fields: [occurrenceId], references: [id])
  occurrenceId Int
  filename     String
  createdAt    DateTime         @default(now())
}

model Enrollment {
  userId     String
  lessonId   Int
  enrolledAt DateTime @default(now())

  // relations
  user   User   @relation("Enrollments_user", fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation("Enrollments_lesson", fields: [lessonId], references: [id], onDelete: Cascade)

  @@id([userId, lessonId])
  @@index([lessonId])
}

model StudentGuardian {
  studentId  String
  guardianId String

  // Relations back to User
  student  User @relation("GuardianToStudent", fields: [studentId], references: [id], onDelete: Cascade)
  guardian User @relation("StudentToGuardian", fields: [guardianId], references: [id], onDelete: Cascade)

  @@id([studentId, guardianId])
  @@index([guardianId])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  present   Boolean
  createdAt DateTime @default(now())

  @@unique([lessonId, userId, date])
}

model Homework {
  id                 Int              @id @default(autoincrement())
  filePath           String
  dueDate            DateTime
  lessonOccurrence   LessonOccurrence @relation(fields: [lessonOccurrenceId], references: [id])
  lessonOccurrenceId Int
  createdAt          DateTime         @default(now())
}
